var SegmentCacheInMemory = /*#__PURE__*/function () {
  function SegmentCacheInMemory(keys) {
    this.keys = keys;
    this.flush();
  }

  var _proto = SegmentCacheInMemory.prototype;

  _proto.flush = function flush() {
    this.segmentCache = {};
  };

  _proto.addToSegment = function addToSegment(segmentName
  /*, segmentKeys: Array<string>*/
  ) {
    var segmentKey = this.keys.buildSegmentNameKey(segmentName);
    this.segmentCache[segmentKey] = true;
    return true;
  };

  _proto.removeFromSegment = function removeFromSegment(segmentName
  /*, segmentKeys: Array<string>*/
  ) {
    var segmentKey = this.keys.buildSegmentNameKey(segmentName);
    delete this.segmentCache[segmentKey];
    return true;
  }
  /**
   * Reset (update) the cached list of segments with the given list, removing and adding segments if necessary.
   * @NOTE based on the way we use segments in the browser, this way is the best option
   *
   * @param {string[]} segmentNames list of segment names
   * @returns boolean indicating if the cache was updated (i.e., given list was different from the cached one)
   */
  ;

  _proto.resetSegments = function resetSegments(segmentNames) {
    var _this = this;

    var isDiff = false;
    var index;
    var storedSegmentKeys = Object.keys(this.segmentCache); // Extreme fast => everything is empty

    if (segmentNames.length === 0 && storedSegmentKeys.length === segmentNames.length) return isDiff; // Quick path

    if (storedSegmentKeys.length !== segmentNames.length) {
      isDiff = true;
      this.segmentCache = {};
      segmentNames.forEach(function (s) {
        _this.addToSegment(s);
      });
    } else {
      // Slowest path => we need to find at least 1 difference because
      for (index = 0; index < segmentNames.length && this.isInSegment(segmentNames[index]); index++) {// TODO: why empty statement?
      }

      if (index < segmentNames.length) {
        isDiff = true;
        this.segmentCache = {};
        segmentNames.forEach(function (s) {
          _this.addToSegment(s);
        });
      }
    }

    return isDiff;
  };

  _proto.isInSegment = function isInSegment(segmentName
  /*, key: string*/
  ) {
    var segmentKey = this.keys.buildSegmentNameKey(segmentName);
    return this.segmentCache[segmentKey] === true;
  };

  _proto.setChangeNumber = function setChangeNumber()
  /*segmentName: string, changeNumber: number*/
  {
    return true;
  };

  _proto.getChangeNumber = function getChangeNumber()
  /*segmentName: string*/
  {
    return -1;
  };

  _proto.registerSegment = function registerSegment()
  /*segment: string*/
  {
    return false;
  };

  _proto.registerSegments = function registerSegments()
  /*segments: Iterable<string>*/
  {
    return false;
  };

  _proto.getRegisteredSegments = function getRegisteredSegments() {
    return [];
  };

  return SegmentCacheInMemory;
}();

export default SegmentCacheInMemory;