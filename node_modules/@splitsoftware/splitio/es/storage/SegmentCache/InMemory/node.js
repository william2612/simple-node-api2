import { numberIsInteger } from '../../../utils/lang';
import { _Set } from '../../../utils/lang/Sets';

var SegmentCacheInMemory = /*#__PURE__*/function () {
  function SegmentCacheInMemory(keys) {
    this.keys = keys;
    this.flush();
  }

  var _proto = SegmentCacheInMemory.prototype;

  _proto.addToSegment = function addToSegment(segmentName, segmentKeys) {
    var values = this.segmentCache[segmentName];
    var keySet = values ? values : new _Set();
    segmentKeys.forEach(function (k) {
      return keySet.add(k);
    });
    this.segmentCache[segmentName] = keySet;
    return true;
  };

  _proto.removeFromSegment = function removeFromSegment(segmentName, segmentKeys) {
    var values = this.segmentCache[segmentName];
    var keySet = values ? values : new _Set();
    segmentKeys.forEach(function (k) {
      return keySet.delete(k);
    });
    this.segmentCache[segmentName] = keySet;
    return true;
  };

  _proto.isInSegment = function isInSegment(segmentName, key) {
    var segmentValues = this.segmentCache[segmentName];

    if (segmentValues) {
      return segmentValues.has(key);
    }

    return false;
  };

  _proto.registerSegment = function registerSegment(segmentName) {
    if (!this.segmentCache[segmentName]) {
      this.segmentCache[segmentName] = new _Set();
    }

    return true;
  };

  _proto.registerSegments = function registerSegments(segments) {
    for (var i = 0; i < segments.length; i++) {
      this.registerSegment(segments[i]);
    }

    return true;
  };

  _proto.getRegisteredSegments = function getRegisteredSegments() {
    return Object.keys(this.segmentCache);
  };

  _proto.setChangeNumber = function setChangeNumber(segmentName, changeNumber) {
    var segmentChangeNumberKey = this.keys.buildSegmentTillKey(segmentName);
    this.segmentChangeNumber[segmentChangeNumberKey] = changeNumber;
    return true;
  };

  _proto.getChangeNumber = function getChangeNumber(segmentName) {
    var segmentChangeNumberKey = this.keys.buildSegmentTillKey(segmentName);
    var value = this.segmentChangeNumber[segmentChangeNumberKey];
    return numberIsInteger(value) ? value : -1;
  };

  _proto.flush = function flush() {
    this.segmentCache = {};
    this.segmentChangeNumber = {};
  };

  return SegmentCacheInMemory;
}();

export default SegmentCacheInMemory;