import { numberIsNaN } from '../../../utils/lang';

var SegmentCacheInRedis = /*#__PURE__*/function () {
  function SegmentCacheInRedis(keys, redis) {
    this.redis = redis;
    this.keys = keys;
  }

  var _proto = SegmentCacheInRedis.prototype;

  _proto.addToSegment = function addToSegment(segmentName, segmentKeys) {
    var segmentKey = this.keys.buildSegmentNameKey(segmentName);

    if (segmentKeys.length) {
      return this.redis.sadd(segmentKey, segmentKeys).then(function () {
        return true;
      });
    } else {
      return Promise.resolve(true);
    }
  };

  _proto.removeFromSegment = function removeFromSegment(segmentName, segmentKeys) {
    var segmentKey = this.keys.buildSegmentNameKey(segmentName);

    if (segmentKeys.length) {
      return this.redis.srem(segmentKey, segmentKeys).then(function () {
        return true;
      });
    } else {
      return Promise.resolve(true);
    }
  };

  _proto.isInSegment = function isInSegment(segmentName, key) {
    return this.redis.sismember(this.keys.buildSegmentNameKey(segmentName), key).then(function (matches) {
      return matches !== 0;
    });
  };

  _proto.setChangeNumber = function setChangeNumber(segmentName, changeNumber) {
    return this.redis.set(this.keys.buildSegmentTillKey(segmentName), changeNumber + '').then(function (status) {
      return status === 'OK';
    });
  };

  _proto.getChangeNumber = function getChangeNumber(segmentName) {
    return this.redis.get(this.keys.buildSegmentTillKey(segmentName)).then(function (value) {
      var i = parseInt(value, 10);
      return numberIsNaN(i) ? -1 : i;
    });
  };

  _proto.registerSegment = function registerSegment(segment) {
    return this.registerSegments(segment);
  };

  _proto.registerSegments = function registerSegments(segments) {
    if (segments.length) {
      return this.redis.sadd(this.keys.buildRegisteredSegmentsKey(), segments).then(function () {
        return true;
      });
    } else {
      return Promise.resolve(true);
    }
  };

  _proto.getRegisteredSegments = function getRegisteredSegments() {
    return this.redis.smembers(this.keys.buildRegisteredSegmentsKey());
  };

  _proto.flush = function flush() {
    return this.redis.flushdb().then(function (status) {
      return status === 'OK';
    });
  };

  return SegmentCacheInRedis;
}();

export default SegmentCacheInRedis;