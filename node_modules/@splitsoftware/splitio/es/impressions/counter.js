import { truncateTimeFrame } from '../utils/time';
import objectAssign from 'object-assign';

var ImpressionCounter = /*#__PURE__*/function () {
  function ImpressionCounter() {
    this.cache = {};
  }
  /**
  * Builds key to be stored in the cache with the featureName and the timeFrame truncated.
  */


  var _proto = ImpressionCounter.prototype;

  _proto._makeKey = function _makeKey(featureName, timeFrame) {
    return featureName + "::" + truncateTimeFrame(timeFrame);
  }
  /**
  * Increments the quantity of impressions with the passed featureName and timeFrame.
  */
  ;

  _proto.inc = function inc(featureName, timeFrame, amount) {
    var key = this._makeKey(featureName, timeFrame);

    var currentAmount = this.cache[key];
    this.cache[key] = currentAmount ? currentAmount + amount : amount;
  }
  /**
  * Returns all the elements stored in the cache and resets the cache.
  */
  ;

  _proto.popAll = function popAll() {
    var res = {};
    objectAssign(res, this.cache);
    this.cache = {};
    return res;
  }
  /**
  * Returns how many keys are stored in cache.
  */
  ;

  _proto.size = function size() {
    return Object.keys(this.cache).length;
  };

  return ImpressionCounter;
}();

export default ImpressionCounter;