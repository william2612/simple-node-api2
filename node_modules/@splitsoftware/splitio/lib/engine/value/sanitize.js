"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _logger = _interopRequireDefault(require("../../utils/logger"));

var _lang = require("../../utils/lang");

var _convertions = require("../convertions");

var _types = require("../matchers/types");

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var log = (0, _logger.default)('splitio-engine:sanitize');

function sanitizeNumber(val) {
  var num = (0, _lang.toNumber)(val);
  return isNaN(num) ? undefined : num;
}

function sanitizeString(val) {
  var valueToSanitize = val;

  if ((0, _lang.isObject)(val)) {
    // If the value is an object and is not a key, discard it.
    valueToSanitize = val.matchingKey ? val.matchingKey : undefined;
  }

  var str = (0, _lang.toString)(valueToSanitize);
  return str ? str : undefined;
}

function sanitizeArray(val) {
  var arr = Array.isArray(val) ? (0, _lang.uniq)(val.map(function (e) {
    return e + '';
  })) : [];
  return arr.length ? arr : undefined;
}

function sanitizeBoolean(val) {
  if (val === true || val === false) return val;

  if (typeof val === 'string') {
    var lowerCaseValue = val.toLocaleLowerCase();
    if (lowerCaseValue === 'true') return true;
    if (lowerCaseValue === 'false') return false;
  }

  return undefined;
}

function dependencyProcessor(sanitizedValue, attributes) {
  return {
    key: sanitizedValue,
    attributes: attributes
  };
}
/**
 * We can define a pre-processing for the value, to be executed prior to matcher evaluation.
 */


function getProcessingFunction(matcherTypeID, dataType) {
  switch (matcherTypeID) {
    case _types.matcherTypes.EQUAL_TO:
      return dataType === 'DATETIME' ? _convertions.zeroSinceHH : undefined;

    case _types.matcherTypes.GREATER_THAN_OR_EQUAL_TO:
    case _types.matcherTypes.LESS_THAN_OR_EQUAL_TO:
    case _types.matcherTypes.BETWEEN:
      return dataType === 'DATETIME' ? _convertions.zeroSinceSS : undefined;

    case _types.matcherTypes.IN_SPLIT_TREATMENT:
      return dependencyProcessor;

    default:
      return undefined;
  }
}

function sanitizeValue(matcherTypeID, value, dataType, attributes) {
  var processor = getProcessingFunction(matcherTypeID, dataType);
  var sanitizedValue;

  switch (dataType) {
    case _types.matcherDataTypes.NUMBER:
    case _types.matcherDataTypes.DATETIME:
      sanitizedValue = sanitizeNumber(value);
      break;

    case _types.matcherDataTypes.STRING:
      sanitizedValue = sanitizeString(value);
      break;

    case _types.matcherDataTypes.SET:
      sanitizedValue = sanitizeArray(value);
      break;

    case _types.matcherDataTypes.BOOLEAN:
      sanitizedValue = sanitizeBoolean(value);
      break;

    case _types.matcherDataTypes.NOT_SPECIFIED:
      sanitizedValue = value;
      break;

    default:
      sanitizedValue = undefined;
  }

  if (processor) {
    sanitizedValue = processor(sanitizedValue, attributes);
  }

  log.debug("Attempted to sanitize [" + value + "] which should be of type [" + dataType + "]. \n Sanitized and processed value => [" + (sanitizedValue instanceof Object ? JSON.stringify(sanitizedValue) : sanitizedValue) + "]");
  return sanitizedValue;
}

var _default = sanitizeValue;
exports.default = _default;