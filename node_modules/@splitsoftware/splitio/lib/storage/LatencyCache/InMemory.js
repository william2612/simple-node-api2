"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _findIndex = _interopRequireDefault(require("./findIndex"));

/**
Copyright 2016 Split Software

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
**/
var LatencyCacheInMemory = /*#__PURE__*/function () {
  function LatencyCacheInMemory() {
    this.clear();
  }

  var _proto = LatencyCacheInMemory.prototype;

  _proto.clear = function clear() {
    this.counters = {};
    return this;
  };

  _proto.state = function state() {
    return this.counters;
  };

  _proto.track = function track(metricName, latency) {
    // Initialize if needed
    if (this.counters[metricName] === undefined) {
      this.counters[metricName] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    } // +1 based on the latency number


    this.counters[metricName][(0, _findIndex.default)(latency)]++;
    return this;
  };

  _proto.isEmpty = function isEmpty() {
    return Object.keys(this.counters).length === 0;
  };

  _proto.toJSON = function toJSON() {
    return this.counters;
  };

  return LatencyCacheInMemory;
}();

var _default = LatencyCacheInMemory;
exports.default = _default;