"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.default = void 0;

var _inheritsLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/inheritsLoose"));

var _lang = require("../utils/lang");

var _Keys = _interopRequireDefault(require("./Keys"));

var _factory = require("../utils/key/factory");

var KeyBuilderForLocalStorage = /*#__PURE__*/function (_KeyBuilder) {
  (0, _inheritsLoose2.default)(KeyBuilderForLocalStorage, _KeyBuilder);

  function KeyBuilderForLocalStorage(settings) {
    var _this;

    _this = _KeyBuilder.call(this, settings) || this;
    _this.regexSplitCacheKey = new RegExp("^" + _this.settings.storage.prefix + "\\.(splits?|trafficType)\\.");
    return _this;
  }

  var _proto = KeyBuilderForLocalStorage.prototype;

  _proto.buildSegmentNameKey = function buildSegmentNameKey(segmentName) {
    return (0, _factory.matching)(this.settings.core.key) + "." + this.settings.storage.prefix + ".segment." + segmentName;
  };

  _proto.extractSegmentName = function extractSegmentName(builtSegmentKeyName) {
    var prefix = (0, _factory.matching)(this.settings.core.key) + "." + this.settings.storage.prefix + ".segment.";
    if ((0, _lang.startsWith)(builtSegmentKeyName, prefix)) return builtSegmentKeyName.substr(prefix.length);
  };

  _proto.buildSplitsWithSegmentCountKey = function buildSplitsWithSegmentCountKey() {
    return this.settings.storage.prefix + ".splits.usingSegments";
  };

  _proto.buildLastUpdatedKey = function buildLastUpdatedKey() {
    return this.settings.storage.prefix + ".splits.lastUpdated";
  };

  _proto.isSplitCacheKey = function isSplitCacheKey(key) {
    return this.regexSplitCacheKey.test(key);
  };

  _proto.buildSplitsFilterQueryKey = function buildSplitsFilterQueryKey() {
    return this.settings.storage.prefix + ".splits.filterQuery";
  };

  return KeyBuilderForLocalStorage;
}(_Keys.default);

var _default = KeyBuilderForLocalStorage;
exports.default = _default;